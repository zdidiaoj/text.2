#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>


//结构体传参的时候，要传结构体的地址
struct S
{
	int data[1000];
	int num;
};

struct S s = { { 1, 2, 3, 4 }, 1000 };
//结构体传参
void print1(struct S s)
{
	printf("%d\n", s.num);
}

//结构体地址传参
void print2(struct S*ps)
{
	printf("%d\n", ps->num);
}

int main()
{
	print1(s);
	print2(&s);
	return 0;
}

//struct Stu
//{
//	char name[12];
//	int age;
//};
//
//void print(struct Stu* ps)
//{
//	printf("name=%s   age=%d\n", (*ps).name, (*ps).age);
//	printf("name=%s  age=%d\n", ps->name, ps->age);
//}
//
//
//int main()
//{
//	struct Stu s = { "zhangshan", 8 };
//	print(&s);
//	return 0;
//}


//struct Point
//{
//	int x;
//	int y;
//}p1;//声明类型的同时赋初值p1
//struct Point p2;//定义结构体变量p2
//
////初始化：定义变量的同时赋初值。
//struct Point p3 = { 4, 5 };
//
//struct Stu    //声明类型
//{
//	char name[15];
//	int age;
//};
//struct Stu s = { "张三", 18 };//初始化
//
//struct Node
//{
//	int date;
//	struct Point p;
//	struct Node* next;
//}n1 = { 10, { 4, 5 }, NULL };//结构体嵌套初始化
//
//struct Node n2 = { 20, { 1, 2 }, NULL };
//
//
////总结：指针的类型决定了指针向前或者向后走一步有多大（距离）。
//int main()
//{
//	int n = 0;
//	char *pc = (char*)&n;
//	int *pi = &n;
//	printf("%p\n", &n);
//	printf("%p\n", pc);
//	printf("%p\n", pc + 1);
//	printf("%p\n", pi);
//	printf("%p\n", pi + 1);
//}
